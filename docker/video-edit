#!/usr/bin/python3

import pty
import os
import sys
import select
from subprocess import check_output, PIPE, Popen, TimeoutExpired
import signal
import argparse

#EXECPATH = os.path.dirname(os.path.abspath(__file__))
EXECPATH = '/videos'
RUNNING_PROCS = set()
SHUTDOWN = False                                               
PTY, TTY = pty.openpty()

class VideoEdit(object):

    @staticmethod
    def dl(cmdline_args):
        command = ['youtube-dl', '-v', '--prefer-ffmpeg', '-f', 'bestvideo+bestaudio', '--fixup', 'detect_or_warn', '--rm-cache-dir', '--no-playlist', '--print-traffic', '--no-call-home']
        video_format = cmdline_args.format
        if cmdline_args.out_file_name is not None:
            command.append('-o')
            command.append(cmdline_args.out_file_name)
        if cmdline_args.url is not None:
            url = cmdline_args.url
        else:
            exit(2)
        user_agent = cmdline_args.user_agent
        command.append('--recode-video')
        command.append(video_format)
        command.append('--user-agent')
        command.append(f"'{user_agent}'")
        command.append(url)
        VideoEdit.__run_command(command)

    @staticmethod
    def edit(cmdline_args):
        command = ['ffmpeg', '-c copy']
        in_file = f'\"{cmdline_args.in_file_name}\"'
        out_file = f'\"{cmdline_args.out_file_name}\"'
        start_time = f'\"cmdline_args.start_time\"'
        end_time = f'\"cmdline_args.end_time\"'
        command.append('-i')
        command.append(in_file)
        command.append('-ss')
        command.append(start_time)
        command.append('-to')
        command.append(end_time)
        command.append(out_file)
        os.chdir(EXECPATH)
        VideoEdit.__run_command(command)

    @staticmethod
    def __run_command(command, timeout=0):
        if command != '':
            process = Popen(command)
            RUNNING_PROCS.add(process)
            try:
                return process.communicate()
            except TimeoutExpired:
                process.kill()
                return process.communicate()
            finally:
                RUNNING_PROCS.remove(process)
        else:
            return None

    @staticmethod
    def __mkdir(path):
        if not os.path.isdir(path) or not os.path.exists(path):
            os.mkdir(path)
        return path


def handle_signal(signum, frame):
    # send signal recieved to subprocesses
    global SHUTDOWN
    SHUTDOWN = True
    for proc in RUNNING_PROCS:
        if proc.poll() is None:
            proc.send_signal(signum)

signal.signal(signal.SIGINT, handle_signal)
signal.signal(signal.SIGTERM, handle_signal)

arg_parser = argparse.ArgumentParser(
    description='Download and locally edit hosted video content.')

arg_parser.add_argument('--url',
                        type=str,
                        help='remote video url')
arg_parser.add_argument('--format',
                        choices=['mp4', 'flv', 'ogg', 'webm', 'mkv', 'avi'],
                        default='mp4',
                        help='output video format')
arg_parser.add_argument('--user_agent',
                        type=str,
                        default='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.74 Safari/537.36 Edg/79.0.309.43',
                        help='downloader user-agent')
arg_parser.add_argument('--start_time',
                        type=str,
                        help='video clip start time')
arg_parser.add_argument('--end_time',
                        type=str,
                        help='video clip end time')
arg_parser.add_argument('--in_file_name',
                        type=str,
                        help='editor input video file name path')
arg_parser.add_argument('--out_file_name',
                        type=str,
                        help='editor output video file')
arg_parser.add_argument('operation',
                        choices=['dl', 'edit'],
                        help='video editor and downloader commands')

if __name__ == '__main__':
    cmdline_args = arg_parser.parse_args()
    cmd = cmdline_args.operation
    if cmd == 'dl':
        VideoEdit.dl(cmdline_args)
    if cmd == 'edit':
        VideoEdit.edit(cmdline_args)
